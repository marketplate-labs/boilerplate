version: "2.1"

services:
  postgres:
    image: postgres:13.2
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    networks:
      - local
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.2
    command: sh -c "redis-server --requirepass password"
    networks:
      - local
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  metadata:
    build:
      context: './metadata'
      dockerfile: 'Dockerfile'
      args:
        PORT: 3002
        CHAIN_ID: "${CHAIN_ID}"
    networks:
      - local
    ports:
      - 3002:3002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://metadata:3002/api/yaml"]
      interval: 5s
      timeout: 5s
      retries: 5

  indexer:
    build:
      context: './indexer'
      dockerfile: 'Dockerfile'
    environment:
      - VERSION=v5 # For logging purposes
      - PORT=3001 # Port to listen on
      - CHAIN_ID="${CHAIN_ID}" # Chain id the indexer is running on
      - INDEXER_BASE_URL=http://localhost:3001
      - ADMIN_API_KEY=MY_KEY # Required by all admin APIs (via the `X-Admin-Api-Key` header)
      - BASE_NETWORK_HTTP_URL="https://eth-goerli.g.alchemy.com/v2/${ALCHEMY_KEY}"" # Http and WebSocket provider URLs
      - BASE_NETWORK_WS_URL="wss://eth-goerli.g.alchemy.com/v2/${ALCHEMY_KEY}"
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/postgres?schema=public # Postgres and Redis connection URLs
      - REDIS_URL=redis://redis:password@redis:6379
      - CATCHUP=1 # If enabled, the indexer will try to catch-up with the tip of the blockchain
      - MASTER=1 # Only one indexer instance should be the master
      - DO_BACKGROUND_WORK=1 # If enabled, the indexer will run any background jobs/processes together with serving API requests
      - DO_EVENTS_SYNC_BACKFILL=1 # If enabled, the workers will process backfill requests
      - DISABLE_ORDERS=0 # When in the process of backfilling, order handling should be disabled
      - CIPHER_SECRET=fb1f4b0a7daaada6cae678df32fad0f0
      - OPENSEA_INDEXER_API_BASE_URL=http://relayer:3003
      - WHITELISTED_CURRENCIES="${WHITELISTED_TOKENS}"
      # Optional
      - METADATA_API_BASE_URL=http://metadata:3002/api
    networks:
      - local
    ports:
      - 3001:3001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://indexer:3001"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      metadata:
        condition: service_healthy

  marketplace:
    build:
      context: './marketplace'
      dockerfile: 'Dockerfile'
      args:
        PORT: "${FRONTEND_PORT}"
        NEXT_PUBLIC_CHAIN_ID: "${CHAIN_ID}"
        NEXT_PUBLIC_RESERVOIR_API_BASE: http://indexer:3001
        NEXT_PUBLIC_RESERVOIR_API_BASE_EXTERNAL: http://localhost:3001
        NEXT_PUBLIC_ALCHEMY_ID: "${ALCHEMY_KEY}"
    networks:
      - local
    ports:
      - 3000:3000
    depends_on:
      indexer:
        condition: service_healthy

  relayer:
    build:
      context: './relayer'
      dockerfile: 'Dockerfile'
    environment:
      - PORT=3003
      - CHAIN_ID="${CHAIN_ID}"
      - DO_BACKFILL_WORK=1
      - DO_REALTIME_WORK=1
      - DO_LIVE_WORK=1
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/postgres?schema=public # Postgres and Redis connection URLs
      - REDIS_URL=redis://redis:password@redis:6379
      - BASE_INDEXER_LITE_API_URL=http://indexer:3001
      - INDEXER_ADMIN_API_KEY=MY_KEY
      # - INDEXER_API_KEY=
    networks:
      - local
    ports:
      - 3003:3003
    depends_on:
      indexer:
        condition: service_healthy

networks:
  local:
    driver: bridge
